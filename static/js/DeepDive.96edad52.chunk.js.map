{"version":3,"sources":["components/Charts/chart-defaults.js","components/Charts/agechart.js","components/Charts/allstates.js","components/Charts/dailyconfirmedchart.js","components/Charts/genderchart.js","components/Charts/growthtrendchart.js","components/Charts/nationalitychart.js","components/Charts/totalconfirmedchart.js","components/deepdive.js"],"names":["defaults","global","deepmerge","defaultFontFamily","elements","line","fill","point","pointStyle","tooltips","intersect","mode","position","displayColors","borderWidth","titleSpacing","titleMarginBottom","bodySpacing","cornerRadius","xPadding","yPadding","caretSize","legend","display","labels","padding","usePointStyle","hover","layout","left","right","top","bottom","formatNumber","number","window","Intl","NumberFormat","format","defaultOptions","responsive","events","maintainAspectRatio","backgroundColor","titleFontColor","bodyFontColor","callbacks","label","tooltipItem","data","datasets","datasetIndex","Math","round","yLabel","radius","tension","yAxisDefaults","type","ticks","beginAtZero","max","undefined","precision","callback","value","gridLines","color","drawBorder","tickMarkLength","xAxisDefaults","AgeChart","props","ages","Array","length","forEach","patient","agebracket","age","parseInt","i","chartData","chartOptions","scales","xAxes","stacked","yAxes","sampleSize","reduce","a","b","className","title","options","AllStatesChart","dates","chartReference","React","createRef","statesData","Map","status","Object","keys","key","date","parse","Date","push","has","set","previousValue","get","currentValue","sortedMap","entries","sort","colors","index","borderCapStyle","pointBackgroundColor","getStateName","borderColor","pointHoverRadius","dataset","boxWidth","fontSize","scaleLabel","labelString","time","unit","tooltipFormat","stepSize","displayFormats","millisecond","second","minute","hour","day","week","month","quarter","year","ref","style","marginTop","height","onClick","ci","current","chartInstance","meta","getDatasetMeta","hidden","update","DailyConfirmedChart","confirmed","recovered","deceased","timeseries","dailyconfirmed","dailyrecovered","dailydeceased","barDataSet","reverse","generateLabels","chart","GenderChart","male","female","gender","total","_meta","percentage","parseFloat","toFixed","GrowthTrendChart","caretPadding","statesDailyData","x","stateData","weekSum","idx","y","order","cubicInterpolationMode","min","values","Number","toString","NationalityChart","nationality","hasOwnProperty","toLowerCase","country","toUpperCase","TotalConfirmedChart","totalconfirmed","totalrecovered","totaldeceased","DeepDive","useState","fetched","setFetched","setTimeseries","rawData","setRawData","statesTimeSeries","setStatesTimeSeries","useEffect","getStates","Promise","all","axios","response","rawDataResponse","stateDailyResponse","cases_time_series","states_daily","raw_data","console","log","Helmet","name","content","animationDelay"],"mappings":"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","file":"static/js/DeepDive.96edad52.chunk.js","sourcesContent":["import deepmerge from 'deepmerge';\nimport {defaults} from 'react-chartjs-2';\n\ndefaults.global = deepmerge(defaults.global, {\n  defaultFontFamily: 'Archia',\n  elements: {\n    line: {\n      fill: false,\n    },\n    point: {\n      pointStyle: 'rectRounded',\n    },\n  },\n  tooltips: {\n    intersect: false,\n    mode: 'nearest',\n    position: 'average',\n    displayColors: false,\n    borderWidth: 0,\n    titleSpacing: 4,\n    titleMarginBottom: 8,\n    bodySpacing: 5,\n    cornerRadius: 3,\n    xPadding: 6,\n    yPadding: 6,\n    caretSize: 0,\n  },\n  legend: {\n    display: true,\n    position: 'bottom',\n    labels: {\n      padding: 15,\n      usePointStyle: true,\n    },\n  },\n  hover: {\n    intersect: false,\n  },\n  layout: {\n    padding: {\n      left: 0,\n      right: 0,\n      top: 0,\n      bottom: 20,\n    },\n  },\n});\n\nconst formatNumber = (number) =>\n  'Intl' in window ? new Intl.NumberFormat('en-IN').format(number) : number;\n\nconst defaultOptions = {\n  responsive: true,\n  events: [\n    'click',\n    'mousemove',\n    'mouseout',\n    'touchstart',\n    'touchmove',\n    'touchend',\n  ],\n  maintainAspectRatio: false,\n  tooltips: {\n    backgroundColor: 'rgba(20,20,20,0.9)',\n    titleFontColor: 'rgba(255,255,255, 0.9)',\n    bodyFontColor: 'rgba(255,255,255, 0.9)',\n    caretSize: 0,\n    borderWidth: 0,\n    mode: 'index',\n    callbacks: {\n      label: function (tooltipItem, data) {\n        let label = data.datasets[tooltipItem.datasetIndex].label || '';\n        if (label) {\n          label += ': ';\n        }\n        label += formatNumber(Math.round(tooltipItem.yLabel * 100) / 100);\n        return label;\n      },\n    },\n  },\n  elements: {\n    point: {\n      radius: 0,\n    },\n    line: {\n      tension: 0.1,\n    },\n  },\n};\n\nconst yAxisDefaults = {\n  type: 'linear',\n  ticks: {\n    beginAtZero: true,\n    max: undefined,\n    precision: 0,\n    callback: (value) => formatNumber(value),\n  },\n  gridLines: {\n    color: 'rgba(0, 0, 0, 0.07)',\n    drawBorder: false,\n    tickMarkLength: 6,\n  },\n};\n\nconst xAxisDefaults = {\n  gridLines: {\n    color: 'rgba(0, 0, 0, 0)',\n  },\n};\n\nexport {defaultOptions, formatNumber, yAxisDefaults, xAxisDefaults};\n","import {defaultOptions, xAxisDefaults, formatNumber} from './chart-defaults';\n\nimport deepmerge from 'deepmerge';\nimport React from 'react';\nimport {Bar} from 'react-chartjs-2';\n\nfunction AgeChart(props) {\n  const ages = Array(10).fill(0);\n  if (!props.data || props.data.length === 0) {\n    return <div></div>;\n  }\n\n  props.data.forEach((patient) => {\n    if (patient.agebracket) {\n      const age = parseInt(patient.agebracket);\n      for (let i = 0; i < 10; i++) {\n        if (age > i * 10 && age <= (i + 1) * 10) {\n          ages[i]++;\n        }\n      }\n    }\n  });\n\n  const chartData = {\n    labels: [\n      '0-10',\n      '11-20',\n      '21-30',\n      '31-40',\n      '41-50',\n      '51-60',\n      '61-70',\n      '71-80',\n      '81-90',\n      '91-100',\n    ],\n    datasets: [\n      {\n        data: ages,\n        label: 'Cases',\n        backgroundColor: '#bc79c9',\n      },\n    ],\n  };\n\n  const chartOptions = deepmerge(defaultOptions, {\n    legend: {\n      display: false,\n    },\n    scales: {\n      xAxes: [\n        deepmerge(xAxisDefaults, {\n          stacked: true,\n        }),\n      ],\n      yAxes: [\n        {\n          stacked: true,\n        },\n      ],\n    },\n    events: ['mousemove', 'mouseout', 'touchstart', 'touchmove', 'touchend'],\n    responsive: true,\n    maintainAspectRatio: false,\n    tooltips: {\n      mode: 'index',\n    },\n  });\n\n  const sampleSize = ages.reduce((a, b) => a + b, 0);\n\n  return (\n    <div className=\"charts-header\">\n      <div className=\"chart-title\">{props.title}</div>\n      <div className=\"chart-content doughnut\">\n        <Bar data={chartData} options={chartOptions} />\n      </div>\n      <div className=\"chart-note\">\n        Sample Size: {formatNumber(sampleSize)} patients\n      </div>\n    </div>\n  );\n}\n\nexport default AgeChart;\n","import {defaultOptions, xAxisDefaults, yAxisDefaults} from './chart-defaults';\n\nimport {getStateName} from '../../utils/commonfunctions';\n\nimport {parse} from 'date-fns';\nimport deepmerge from 'deepmerge';\nimport React from 'react';\nimport {Line} from 'react-chartjs-2';\n\nfunction AllStatesChart(props) {\n  const dates = [];\n  const chartReference = React.createRef();\n\n  if (!props.data || props.data.length === 0) {\n    return <div></div>;\n  }\n\n  const statesData = new Map();\n\n  props.data.forEach((data) => {\n    if (data.status !== 'Confirmed') {\n      return;\n    }\n\n    Object.keys(data).forEach((key) => {\n      if (key === 'date') {\n        const date = parse(data.date, 'dd-MMM-yy', new Date());\n        dates.push(date);\n      }\n\n      if (key === 'status' || key === 'date') {\n        return;\n      }\n\n      if (!statesData.has(key)) {\n        statesData.set(key, []);\n      }\n      const previousValue =\n        statesData.get(key).length > 0\n          ? parseInt(statesData.get(key)[statesData.get(key).length - 1])\n          : 0;\n      const currentValue = data[key] !== '' ? parseInt(data[key]) : 0;\n      statesData.get(key).push(previousValue + currentValue);\n    });\n  });\n\n  const sortedMap = new Map(\n    [...statesData.entries()].sort((a, b) => {\n      return a[1][a[1].length - 1] < b[1][b[1].length - 1] ? 1 : -1;\n    })\n  );\n\n  const colors = [\n    '#718af0',\n    '#7dd6fa',\n    '#59b3aa',\n    '#9bc26b',\n    '#e5d22f',\n    '#ffb041',\n    '#ff8a66',\n    '#db6b8f',\n    '#bd66cc',\n    '#8e8e8e',\n  ];\n\n  let index = 0;\n  const datasets = [];\n  sortedMap.forEach((data, key) => {\n    if (key === 'tt') {\n      return;\n    }\n\n    if (index >= 10) {\n      return;\n    }\n\n    datasets.push({\n      borderWidth: 2,\n      data: statesData.get(key),\n      borderCapStyle: 'round',\n      pointBackgroundColor: colors[index],\n      label: getStateName(key),\n      borderColor: colors[index],\n      pointHoverRadius: 0.5,\n    });\n\n    index++;\n  });\n\n  const dataset = {\n    labels: dates,\n    datasets: datasets,\n  };\n\n  const options = deepmerge(defaultOptions, {\n    tooltips: {\n      mode: 'index',\n    },\n    elements: {\n      point: {\n        radius: 0,\n      },\n      line: {\n        tension: 0,\n      },\n    },\n    legend: {\n      labels: {\n        boxWidth: 20,\n        fontSize: 11,\n      },\n    },\n    scales: {\n      yAxes: [\n        deepmerge(yAxisDefaults, {\n          type: 'linear',\n          ticks: {\n            beginAtZero: true,\n            max: undefined,\n            precision: 0,\n          },\n          scaleLabel: {\n            display: false,\n            labelString: 'Total Cases',\n          },\n        }),\n      ],\n      xAxes: [\n        deepmerge(xAxisDefaults, {\n          type: 'time',\n          time: {\n            unit: 'day',\n            tooltipFormat: 'MMM DD',\n            stepSize: 7,\n            displayFormats: {\n              millisecond: 'MMM DD',\n              second: 'MMM DD',\n              minute: 'MMM DD',\n              hour: 'MMM DD',\n              day: 'MMM DD',\n              week: 'MMM DD',\n              month: 'MMM DD',\n              quarter: 'MMM DD',\n              year: 'MMM DD',\n            },\n          },\n          gridLines: {\n            color: 'rgba(0, 0, 0, 0)',\n          },\n        }),\n      ],\n    },\n  });\n\n  function toggleSelection() {\n    // Get reference of chartInstance and update it\n    const ci = chartReference.current.chartInstance;\n    for (let i = 0; i < ci.data.datasets.length; i++) {\n      const meta = ci.getDatasetMeta(i);\n      meta.hidden =\n        meta.hidden === null\n          ? !chartReference.current.chartInstance.data.datasets[i].hidden\n          : null;\n    }\n    ci.update();\n  }\n\n  return (\n    <div className=\"charts-header\">\n      <div className=\"chart-title\">{props.title}</div>\n      <div className=\"chart-content\">\n        <Line data={dataset} options={options} ref={chartReference} />\n      </div>\n      <div className=\"chart-note\" style={{marginTop: '0px', height: '30px'}}>\n        <button onClick={toggleSelection}>Toggle Selection</button>\n      </div>\n    </div>\n  );\n}\n\nexport default AllStatesChart;\n","import {\n  defaultOptions,\n  xAxisDefaults,\n  yAxisDefaults,\n  formatNumber,\n} from './chart-defaults';\n\nimport {format, parse} from 'date-fns';\nimport deepmerge from 'deepmerge';\nimport React from 'react';\nimport {Bar, defaults} from 'react-chartjs-2';\n\nfunction DailyConfirmedChart(props) {\n  const dates = [];\n  const confirmed = [];\n  const recovered = [];\n  const deceased = [];\n\n  if (!props.timeseries || props.timeseries.length === 0) {\n    return <div></div>;\n  }\n\n  props.timeseries.forEach((data, index) => {\n    if (index >= 31) {\n      const date = parse(data.date, 'dd MMMM', new Date(2020, 0, 1));\n      dates.push(format(date, 'dd MMM'));\n      confirmed.push(data.dailyconfirmed);\n      recovered.push(data.dailyrecovered);\n      deceased.push(data.dailydeceased);\n    }\n  });\n\n  const barDataSet = {\n    labels: dates,\n    datasets: [\n      {\n        data: recovered,\n        label: 'Recovered',\n        backgroundColor: '#7ebf80',\n      },\n      {\n        data: deceased,\n        label: 'Deceased',\n        backgroundColor: '#6c757d',\n      },\n      {\n        data: confirmed,\n        label: 'Confirmed',\n        backgroundColor: '#ff6862',\n      },\n    ],\n  };\n\n  const options = deepmerge(defaultOptions, {\n    tooltips: {\n      mode: 'index',\n    },\n    legend: {\n      display: true,\n      reverse: true,\n      labels: {\n        usePointStyle: true, // Required to change pointstyle to 'rectRounded' from 'circle'\n        generateLabels: (chart) => {\n          const labels = defaults.global.legend.labels.generateLabels(chart);\n          labels.forEach((label) => {\n            label.pointStyle = 'rectRounded';\n          });\n          return labels;\n        },\n      },\n    },\n    scales: {\n      xAxes: [\n        deepmerge(xAxisDefaults, {\n          stacked: true,\n        }),\n      ],\n      yAxes: [\n        deepmerge(yAxisDefaults, {\n          stacked: true,\n          ticks: {\n            callback: (value) => formatNumber(value),\n          },\n        }),\n      ],\n    },\n  });\n\n  return (\n    <div className=\"charts-header\">\n      <div className=\"chart-title\">{props.title}</div>\n      <div className=\"chart-content\">\n        <Bar data={barDataSet} options={options} />\n      </div>\n    </div>\n  );\n}\n\nexport default DailyConfirmedChart;\n","import {defaultOptions, formatNumber} from './chart-defaults';\n\nimport deepmerge from 'deepmerge';\nimport React from 'react';\nimport {Doughnut} from 'react-chartjs-2';\n\nfunction GenderChart(props) {\n  let male = 0;\n  let female = 0;\n\n  if (!props.data || props.data.length === 0) {\n    return <div></div>;\n  }\n\n  props.data.forEach((patient) => {\n    if (patient.gender === 'M') {\n      male++;\n    } else if (patient.gender === 'F') {\n      female++;\n    }\n  });\n\n  const chartData = {\n    datasets: [\n      {\n        data: [male, female],\n        backgroundColor: ['#6497f3', '#ea6e9a'],\n        label: 'Hola',\n      },\n    ],\n    labels: ['Male', 'Female'],\n  };\n\n  const chartOptions = deepmerge(defaultOptions, {\n    tooltips: {\n      mode: 'point',\n      position: 'nearest',\n      callbacks: {\n        label: function (tooltipItem, data) {\n          const dataset = data.datasets[tooltipItem.datasetIndex];\n          const meta = dataset._meta[Object.keys(dataset._meta)[0]];\n          const total = meta.total;\n          const currentValue = dataset.data[tooltipItem.index];\n          const percentage = parseFloat(\n            ((currentValue / total) * 100).toFixed(1)\n          );\n          return formatNumber(currentValue) + ' (' + percentage + '%)';\n        },\n        title: function (tooltipItem, data) {\n          return data.labels[tooltipItem[0].index];\n        },\n      },\n    },\n  });\n\n  return (\n    <div className=\"charts-header\">\n      <div className=\"chart-title\">{props.title}</div>\n      <div className=\"chart-content doughnut\">\n        <Doughnut data={chartData} options={chartOptions} />\n      </div>\n      <div className=\"chart-note\">\n        Sample size: {formatNumber(male + female)} patients\n      </div>\n    </div>\n  );\n}\n\nexport default GenderChart;\n","import {getStateName} from '../../utils/commonfunctions';\n\nimport {parse} from 'date-fns';\nimport React from 'react';\nimport {Line, defaults} from 'react-chartjs-2';\n\nfunction GrowthTrendChart(props) {\n  const dates = [];\n\n  defaults.global.elements.line.fill = false;\n\n  defaults.global.tooltips.intersect = false;\n  defaults.global.tooltips.mode = 'nearest';\n  defaults.global.tooltips.position = 'average';\n  defaults.global.tooltips.backgroundColor = 'rgba(255, 255, 255, 0.6)';\n  defaults.global.tooltips.displayColors = false;\n  defaults.global.tooltips.borderColor = '#c62828';\n  defaults.global.tooltips.borderWidth = 1;\n  defaults.global.tooltips.titleFontColor = '#000';\n  defaults.global.tooltips.bodyFontColor = '#000';\n  defaults.global.tooltips.caretPadding = 4;\n  defaults.global.tooltips.intersect = false;\n  defaults.global.tooltips.mode = 'nearest';\n  defaults.global.tooltips.position = 'nearest';\n\n  defaults.global.legend.display = true;\n  defaults.global.legend.position = 'bottom';\n\n  defaults.global.hover.intersect = false;\n\n  if (!props.data || props.data.length === 0) {\n    return <div></div>;\n  }\n\n  const statesData = new Map();\n  const statesDailyData = new Map();\n\n  props.data.forEach((data, index) => {\n    if (data.status !== 'Confirmed') {\n      return;\n    }\n\n    Object.keys(data).forEach((key) => {\n      if (key === 'date') {\n        const date = parse(data.date, 'dd-MMM-yy', new Date());\n        dates.push(date);\n      }\n\n      if (key === 'status' || key === 'date') {\n        return;\n      }\n\n      const currentValue = data[key] !== '' ? parseInt(data[key]) : 0;\n\n      if (currentValue === 0 && !statesData.has(key)) {\n        return;\n      }\n\n      if (!statesData.has(key)) {\n        statesData.set(key, []);\n        statesDailyData.set(key, []);\n      }\n      const previousValue =\n        statesData.get(key).length > 0\n          ? parseInt(statesData.get(key)[statesData.get(key).length - 1].x)\n          : 0;\n\n      const stateData = statesDailyData.get(key);\n      let weekSum = 0;\n      for (let i = 1; i <= 7; ++i) {\n        const idx = stateData.length - i;\n        if (idx >= 0) {\n          weekSum += stateData[idx];\n        }\n      }\n      statesData.get(key).push({x: previousValue + currentValue, y: weekSum});\n      statesDailyData.get(key).push(currentValue);\n    });\n  });\n\n  const sortedMap = new Map(\n    [...statesData.entries()].sort((a, b) => {\n      return a[1][a[1].length - 1].x < b[1][b[1].length - 1].x ? 1 : -1;\n    })\n  );\n\n  const colors = [\n    '#ff073a',\n    '#28a745',\n    '#342ead',\n    '#7D5BA6',\n    '#DD7596',\n    '#16c8f0',\n    '#f67575',\n    '#2b580c',\n    '#9D44B5',\n    '#91132d',\n    '#6D9DC5',\n    '#2b580c',\n    '#6c757d',\n    '#f67575',\n    '#d4f8e8',\n  ];\n\n  let index = 0;\n  const datasets = [];\n  sortedMap.forEach((data, key) => {\n    if (key === 'tt') {\n      return;\n    }\n\n    if (index >= 10) {\n      return;\n    }\n\n    datasets.push({\n      data: statesData.get(key),\n      label: getStateName(key),\n      order: index,\n      borderWidth: 1.0,\n      borderCapStyle: 'round',\n      borderColor: colors[index],\n      pointBackgroundColor: colors[index],\n      pointHoverRadius: 1.0,\n    });\n\n    index++;\n  });\n\n  const dataset = {\n    datasets: datasets,\n  };\n\n  const options = {\n    responsive: true,\n    events: ['click', 'mousemove', 'mouseout', 'touchstart', 'touchmove'],\n    maintainAspectRatio: false,\n    tooltips: {\n      mode: 'index',\n      backgroundColor: 'rgba(0, 0, 0, 0.9)',\n      borderColor: 'rgba(0, 0, 0, 0)',\n      bodyFontColor: 'white',\n      titleFontColor: 'white',\n      displayColors: true,\n    },\n    elements: {\n      point: {\n        radius: 0,\n      },\n      line: {\n        cubicInterpolationMode: 'monotone',\n      },\n    },\n    layout: {\n      padding: {\n        left: 20,\n        right: 20,\n        top: 0,\n        bottom: 20,\n      },\n    },\n    scales: {\n      yAxes: [\n        {\n          type: 'logarithmic',\n          ticks: {\n            beginAtZero: true,\n            min: 1,\n            max: 2000,\n            precision: 0,\n            callback: function (value, index, values) {\n              return Number(value.toString());\n            },\n          },\n          scaleLabel: {\n            display: true,\n            labelString: 'New Cases (since last 7 days)',\n          },\n          gridLines: {\n            color: 'rgba(0, 0, 0, 0)',\n          },\n        },\n      ],\n      xAxes: [\n        {\n          type: 'logarithmic',\n          ticks: {\n            beginAtZero: true,\n            min: 0,\n            max: 2000,\n            precision: 0,\n            callback: function (value, index, values) {\n              return Number(value.toString());\n            },\n          },\n          scaleLabel: {\n            display: true,\n            labelString: 'Total Cases',\n          },\n          gridLines: {\n            color: 'rgba(0, 0, 0, 0)',\n          },\n        },\n      ],\n    },\n  };\n\n  return (\n    <div className=\"charts-header\">\n      <div className=\"chart-title\">{props.title}</div>\n      <div className=\"chart-content\">\n        <Line data={dataset} options={options} />\n      </div>\n    </div>\n  );\n}\n\nexport default GrowthTrendChart;\n","import {formatNumber} from './chart-defaults';\n\nimport React from 'react';\nimport {Doughnut} from 'react-chartjs-2';\n\nfunction NationalityChart(props) {\n  if (!props.data || props.data.length === 0) {\n    return <div></div>;\n  }\n\n  const nationality = {};\n\n  props.data.forEach((patient) => {\n    if (!patient.nationality) {\n      return;\n    }\n    if (!nationality.hasOwnProperty(patient.nationality.toLowerCase())) {\n      nationality[patient.nationality.toLowerCase()] = 0;\n    }\n    nationality[patient.nationality.toLowerCase()]++;\n  });\n\n  // delete nationality.india;\n  const data = [];\n  const labels = [];\n\n  Object.keys(nationality).forEach((country) => {\n    if (country) {\n      labels.push(country.toUpperCase());\n      data.push(nationality[country]);\n    }\n  });\n\n  const chartData = {\n    datasets: [\n      {\n        data: data,\n        backgroundColor: [\n          '#ff8a66',\n          '#718af0',\n          '#7dd6fa',\n          '#59b3aa',\n          '#9bc26b',\n          '#e5d22f',\n          '#ffb041',\n          '#db6b8f',\n          '#bd66cc',\n          '#8e8e8e',\n        ],\n      },\n    ],\n    labels: labels,\n  };\n\n  const chartOptions = {\n    layout: {\n      padding: {\n        left: 20,\n        right: 20,\n        top: 0,\n        bottom: 20,\n      },\n    },\n    legend: {\n      display: false,\n    },\n    responsive: true,\n    maintainAspectRatio: false,\n    tooltips: {\n      mode: 'point',\n      backgroundColor: 'rgba(0, 0, 0, 0.8)',\n      borderColor: 'rgba(0, 0, 0, 0)',\n      bodyFontColor: 'white',\n      titleFontColor: 'white',\n      events: ['mousemove', 'mouseout', 'touchstart', 'touchmove', 'touchend'],\n      callbacks: {\n        label: function (tooltipItem, data) {\n          const dataset = data.datasets[tooltipItem.datasetIndex];\n          const meta = dataset._meta[Object.keys(dataset._meta)[0]];\n          const total = meta.total;\n          const currentValue = dataset.data[tooltipItem.index];\n          const percentage = parseFloat(\n            ((currentValue / total) * 100).toFixed(1)\n          );\n          return currentValue + ' (' + percentage + '%)';\n        },\n        title: function (tooltipItem, data) {\n          return data.labels[tooltipItem[0].index];\n        },\n      },\n    },\n  };\n\n  const sampleSize = data.reduce((a, b) => a + b, 0);\n\n  return (\n    <div className=\"charts-header\">\n      <div className=\"chart-title\">{props.title}</div>\n      <div className=\"chart-content doughnut\">\n        <Doughnut data={chartData} options={chartOptions} />\n      </div>\n      <div className=\"chart-note\">\n        Sample size: {formatNumber(sampleSize)} patients\n      </div>\n    </div>\n  );\n}\n\nexport default NationalityChart;\n","import {defaultOptions, xAxisDefaults, yAxisDefaults} from './chart-defaults';\n\nimport {parse} from 'date-fns';\nimport deepmerge from 'deepmerge';\nimport React from 'react';\nimport {Line} from 'react-chartjs-2';\n\nfunction TotalConfirmedChart(props) {\n  const dates = [];\n  const confirmed = [];\n  const recovered = [];\n  const deceased = [];\n\n  if (!props.timeseries || props.timeseries.length === 0) {\n    return <div></div>;\n  }\n\n  props.timeseries.forEach((data, index) => {\n    if (index >= 31) {\n      const date = parse(data.date, 'dd MMMM', new Date(2020, 0, 1));\n      dates.push(date);\n      confirmed.push(data.totalconfirmed);\n      recovered.push(data.totalrecovered);\n      deceased.push(data.totaldeceased);\n    }\n  });\n\n  const dataset = {\n    labels: dates,\n    datasets: [\n      {\n        borderWidth: 2,\n        data: confirmed,\n        borderCapStyle: 'round',\n        pointBackgroundColor: '#ff6862',\n        label: 'Confirmed',\n        borderColor: '#ff6862',\n        pointHoverRadius: 2,\n      },\n      {\n        borderWidth: 2,\n        data: recovered,\n        borderCapStyle: 'round',\n        pointBackgroundColor: '#7ebf80',\n        label: 'Recovered',\n        borderColor: '#7ebf80',\n        pointHoverRadius: 2,\n      },\n      {\n        borderWidth: 2,\n        data: deceased,\n        borderCapStyle: 'round',\n        pointBackgroundColor: '#6c757d',\n        label: 'Deceased',\n        borderColor: '#6c757d',\n        pointHoverRadius: 2,\n      },\n    ],\n  };\n\n  const options = deepmerge(defaultOptions, {\n    elements: {\n      point: {\n        radius: 0,\n      },\n      line: {\n        tension: 0.1,\n      },\n    },\n    scales: {\n      yAxes: [\n        deepmerge(yAxisDefaults, {\n          scaleLabel: {\n            display: false,\n            labelString: 'Total Cases',\n          },\n        }),\n      ],\n      xAxes: [\n        deepmerge(xAxisDefaults, {\n          type: 'time',\n          time: {\n            unit: 'day',\n            tooltipFormat: 'MMM DD',\n            stepSize: 7,\n            displayFormats: {\n              millisecond: 'MMM DD',\n              second: 'MMM DD',\n              minute: 'MMM DD',\n              hour: 'MMM DD',\n              day: 'MMM DD',\n              week: 'MMM DD',\n              month: 'MMM DD',\n              quarter: 'MMM DD',\n              year: 'MMM DD',\n            },\n          },\n        }),\n      ],\n    },\n  });\n\n  if (props.mode) {\n    options.scales.yAxes = [\n      {\n        type: 'logarithmic',\n        ticks: {\n          min: 0,\n          max: 10000,\n          callback: function (value, index, values) {\n            if (value === 10000) return '10000';\n            if (value === 2000) return '2500';\n            if (value === 500) return '500';\n            if (value === 100) return '100';\n            if (value === 20) return '25';\n            if (value === 5) return '5';\n            if (value === 0) return '0';\n            return null;\n          },\n        },\n        scaleLabel: {\n          display: false,\n          labelString: 'Total Cases',\n        },\n      },\n    ];\n  }\n\n  return (\n    <div className=\"charts-header\">\n      <div className=\"chart-title\">{props.title}</div>\n      <div className=\"chart-content\">\n        <Line data={dataset} options={options} />\n      </div>\n    </div>\n  );\n}\n\nexport default TotalConfirmedChart;\n","import AgeChart from './Charts/agechart';\nimport AllStatesChart from './Charts/allstates';\nimport DailyConfirmedChart from './Charts/dailyconfirmedchart';\nimport GenderChart from './Charts/genderchart';\nimport GrowthTrendChart from './Charts/growthtrendchart';\nimport NationalityChart from './Charts/nationalitychart';\nimport TotalConfirmedChart from './Charts/totalconfirmedchart';\n\nimport axios from 'axios';\nimport React, {useState, useEffect} from 'react';\nimport {Helmet} from 'react-helmet';\n\nfunction DeepDive() {\n  const [fetched, setFetched] = useState(false);\n  const [timeseries, setTimeseries] = useState([]);\n  const [rawData, setRawData] = useState([]);\n  const [statesTimeSeries, setStatesTimeSeries] = useState([]);\n\n  useEffect(() => {\n    if (fetched === false) {\n      getStates();\n    }\n  }, [fetched]);\n\n  const getStates = async () => {\n    try {\n      const [\n        response,\n        rawDataResponse,\n        stateDailyResponse,\n      ] = await Promise.all([\n        axios.get('https://api.covid19india.org/data.json'),\n        axios.get('https://api.covid19india.org/raw_data.json'),\n        axios.get('https://api.covid19india.org/states_daily.json'),\n      ]);\n      setTimeseries(response.data.cases_time_series);\n      setStatesTimeSeries(stateDailyResponse.data.states_daily);\n      setRawData(rawDataResponse.data.raw_data);\n      setFetched(true);\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\n  return (\n    <div className=\"cards-container\">\n      <Helmet>\n        <title>Deep Dive - covid19india.org</title>\n        <meta name=\"title\" content=\"Deep Dive - covid19india.org\" />\n      </Helmet>\n\n      <section className=\"cards\">\n        <div className=\"card fadeInUp\" style={{animationDelay: '0.7s'}}>\n          <TotalConfirmedChart title=\"Total Cases\" timeseries={timeseries} />\n        </div>\n\n        <div className=\"card fadeInUp\" style={{animationDelay: '0.7s'}}>\n          <DailyConfirmedChart title=\"Daily Cases\" timeseries={timeseries} />\n        </div>\n\n        <div\n          className=\"card card-big fadeInUp\"\n          style={{animationDelay: '0.7s'}}\n        >\n          <AllStatesChart\n            title=\"Total Cases by State\"\n            data={statesTimeSeries}\n          />\n        </div>\n\n        <div className=\"card fadeInUp\" style={{animationDelay: '0.7s'}}>\n          <GrowthTrendChart\n            title=\"States - Growth Trend\"\n            data={statesTimeSeries}\n          />\n        </div>\n\n        <div className=\"card fadeInUp\" style={{animationDelay: '0.7s'}}>\n          <GenderChart title=\"Patient Gender\" data={rawData} />\n        </div>\n\n        <div className=\"card fadeInUp\" style={{animationDelay: '0.7s'}}>\n          <AgeChart title=\"Patients by Age\" data={rawData} />\n        </div>\n\n        <div className=\"card fadeInUp\" style={{animationDelay: '0.7s'}}>\n          <NationalityChart title=\"Patients by  Nationality\" data={rawData} />\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default DeepDive;\n"],"sourceRoot":""}